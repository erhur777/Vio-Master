heat_template_version: 2015-04-30

description: |
  A simple Heat template that spins up a 3 Tier App with 1 Web Server, 1 App Server,
  and 1 DB Server on private networks and attaches them to security groups (HOT template in YAML).
  Since this is a NO-NAT template this MUST be done by an OpenStack Admin.

parameters:
  external_network_id:
    type: string
    label: ext-net
    description: UUID of a Neutron external network
    default: 10b7b965-0b1f-40a7-94d0-2cf17e26f8d6

  web_image:
    type: string
    description: Name of image to use for servers
    default: ubuntu-14.04-server-amd64

  app_image:
    type: string
    description: Name of image to use for servers
    default: ubuntu-14.04-server-amd64

  db_image:
    type: string
    description: Name of image to use for servers
    default: ubuntu-14.04-server-amd64

  flavor:
    type: string
    label: Flavor name
    description: Name of the flavor to be used for the instances.
    default: m1.small

  dns:
    type: string
    label: DNS nameserver
    description: Comma separated list of DNS nameservers for the private network
    default: "10.102.254.50"

resources:
  # Create the web logical switch and configure DHCP.
  web_network_01:
    type: OS::Neutron::Net
    properties:
      admin_state_up: true
      name: web-network-01
  web_subnet_01:
    type: OS::Neutron::Subnet
    properties:
      name: web-subnet-01
      cidr: 10.102.253.0/29
      enable_dhcp: true
      dns_nameservers: [ { get_param: dns } ]
      gateway_ip: 10.102.253.1
      network_id: { get_resource: web_network_01 }

  # Create the app logical switch and configure DHCP.
  app_network_01:
    type: OS::Neutron::Net
    properties:
      admin_state_up: true
      name: app-network-01
  app_subnet_01:
    type: OS::Neutron::Subnet
    properties:
      name: app-subnet-01
      cidr: 10.102.253.8/29
      dns_nameservers: [ { get_param: dns } ]
      enable_dhcp: true
      gateway_ip: 10.102.253.9
      network_id: { get_resource: app_network_01 }

  # Create the db logical switch and configure DHCP.
  db_network_01:
    type: OS::Neutron::Net
    properties:
      admin_state_up: true
      name: db-network-01
  db_subnet_01:
    type: OS::Neutron::Subnet
    properties:
      name: db-subnet-01
      cidr: 10.102.253.16/29
      dns_nameservers: [ { get_param: dns } ]
      enable_dhcp: true
      gateway_ip: 10.102.253.17
      network_id: { get_resource: db_network_01 }

  # Create router, add internal interfaces for 3 tiers, and also an uplink.
  heat_router_01:
    type: OS::Neutron::Router
    properties:
      name: heat-router-01
      value_specs: {router_type: exclusive}
      admin_state_up: true
      external_gateway_info: { "enable_snat": false, "network": { get_param: external_network_id }}
  heat_router_int0:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: heat_router_01 }
      subnet_id: { get_resource: web_subnet_01 }
  heat_router_int1:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: heat_router_01 }
      subnet_id: { get_resource: app_subnet_01 }
  heat_router_int2:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: heat_router_01 }
      subnet_id: { get_resource: db_subnet_01 }

  # Create security groups for the tiers.
  db_security_group1:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Allow sql traffic from web tier
      name: db-security-group
      rules:
        - remote_ip_prefix: { get_attr: [ app_subnet_01, cidr ] }
          protocol: tcp
          port_range_min: 3306
          port_range_max: 3306
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp

  web_security_group1:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Allow web traffic from anywhere
      name: web-security-group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 80
          port_range_max: 80
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp

  app_security_group1:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Allow app traffic from web tier
      name: app-security-group
      rules:
        - remote_ip_prefix: { get_attr: [ web_subnet_01, cidr ] }
          protocol: tcp
          port_range_min: 8443
          port_range_max: 8443
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp

  # Create ports on web switch.
  web-svr-01_port0:
    type: OS::Neutron::Port
    properties:
      admin_state_up: true
      network_id: { get_resource: web_network_01 }
      security_groups:
        - { get_resource: web_security_group1 }

  # Create port(s) on app switch.
  app-svr-01_port0:
    type: OS::Neutron::Port
    properties:
      admin_state_up: true
      network_id: { get_resource: app_network_01 }
      security_groups:
        - { get_resource: app_security_group1 }

  # Create port(s) on db switch.
  db-svr-01_port0:
    type: OS::Neutron::Port
    properties:
      admin_state_up: true
      network_id: { get_resource: db_network_01 }
      security_groups:
        - { get_resource: db_security_group1 }

  # Provision instances.
  db-svr-01:
    type: OS::Nova::Server
    properties:
      name: db-instance-01
      image: { get_param: db_image }
      flavor: { get_param: flavor }
      networks:
        - port: { get_resource: db-svr-01_port0 }

  app-svr-01:
    type: OS::Nova::Server
    depends_on: db-svr-01
    properties:
      name: app-instance-01
      image: { get_param: app_image }
      flavor: { get_param: flavor }
      networks:
        - port: { get_resource: app-svr-01_port0 }

  web-svr-01:
    type: OS::Nova::Server
    depends_on: app-svr-01
    properties:
      name: web-instance-01
      image: { get_param: web_image }
      flavor: { get_param: flavor }
      networks:
        - port: { get_resource: web-svr-01_port0 }

outputs:
  web-svr-01_private_ip:
    description: IP address of web-svr-01 in private network
    value: { get_attr: [ web-svr-01, first_address ] }

  app-svr-01_private_ip:
    description: IP address of app-svr-01 in private network
    value: { get_attr: [ app-svr-01, first_address ] }

  db-svr-01_private_ip:
    description: IP address of db-svr-01 in private network
    value: { get_attr: [ db-svr-01, first_address ] }
